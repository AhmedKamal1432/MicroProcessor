Library ieee;

Use ieee.std_logic_1164.all;

entity partA  is  
		port (a,b:in std_logic_vector (15 downto 0);
		s0,s1,cin : in std_logic;
		N,V,Z : out std_logic; -- flags 
		F : out std_logic_vector (15 downto 0);
		C : out std_logic);    
	end entity partA ;

 
architecture  arch4 of partA is
 signal Fout : std_logic_vector (15 downto 0); 
component my_nadder is
       generic (n : integer := 16);
port   (a, b : in std_logic_vector(n-1  downto 0) ;
             cin : in std_logic;  
             s : out std_logic_vector(n-1 downto 0);
             cout : out std_logic);
end component;

signal bb,out1 :std_logic_vector(15 downto 0);
signal	cout1 :std_logic;
		
		
begin

  bb <= "0000000000000000" when s0='0' and  s1='0'
 else b                    when s0='0' and  s1='1'
 else not b                when s0='1' and  s1='0'
 else "1111111111111111"   when s0='1' and  s1='1';



u0:my_nadder part map(a,bb,cin,out1,cout1);



  Fout<= "0000000000000000" when s0='1' and  s1='1' and cin='1'
else out1;
 F<=Fout; 
  C <= '0' when s0='1' and  s1='1' and cin='1'
else cout1;
  Z<= '1' when Fout ="0000000000000000"
else '0' ;
   N <= Fout(15); 
V<= Fout(15) xor (a(15) xnor b(15));    
    
end arch4;


